You are given the head of a linked list.

Remove every node which has a node with a strictly greater value anywhere to the right side of it.

Return the head of the modified linked list.

Example 1:

Input: head = [5,2,13,3,8]
Output: [13,8]
Explanation: The nodes that should be removed are 5, 2 and 3.
- Node 13 is to the right of node 5.
- Node 13 is to the right of node 2.
- Node 8 is to the right of node 3.

Example 2:

Input: head = [1,1,1,1]
Output: [1,1,1,1]
Explanation: Every node has value 1, so no nodes are removed.
 
Constraints:

The number of the nodes in the given list is in the range [1, 105].
1 <= Node.val <= 105

Time Complexity : O(n)
Space Complexity : O(n)

Code :

class Solution {
public:
    ListNode* removeNodes(ListNode* head) {
        stack<int>s;
        while(head){
            while(s.size()>0 && head->val>s.top()){
                s.pop();
            }
            s.push(head->val);
            head=head->next;
        }
        ListNode* temp=NULL;
        while(s.size()>0){
            temp=new ListNode(s.top());
            temp->next=head;
            head=temp;
            s.pop();
        }
        return head;
    }
};
